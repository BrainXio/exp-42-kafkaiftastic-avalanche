name: PR Automation from Commit Message

on:
  push:
    branches:
      - feature/*

jobs:
  check-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check Commit Message Format
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%s)
          echo "DEBUG: Checking commit message: '$COMMIT_MSG'"
          if echo "$COMMIT_MSG" | grep -qE "^create-pr\(.+\)$"; then
            echo "Commit message matches PR creation format."
            echo "should_create_pr=true" >> $GITHUB_ENV
          else
            echo "Commit message does not match PR creation format—skipping."
            echo "should_create_pr=false" >> $GITHUB_ENV
          fi

  pr-automation:
    needs: check-commit
    if: env.should_create_pr == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Validate Commit and Set PR Data
        id: validate
        run: |
          poetry install --no-root
          PR_DATA=$(poetry run tools/validate_commit_msg.py)
          if [ "$PR_DATA" = "INVALID" ]; then
            echo "Invalid commit message—aborting."
            exit 1
          elif [ -z "$PR_DATA" ] || [ "$PR_DATA" = "None" ]; then
            echo "No PR creation needed."
            exit 0
          else
            echo "PR_DATA=$PR_DATA" >> $GITHUB_ENV
          fi

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref_name }}
          base: ${{ env.PR_DATA | fromJson | get('base') }}
          title: ${{ env.PR_DATA | fromJson | get('title') }}
          body: ${{ env.PR_DATA | fromJson | get('description') }}
          labels: ${{ env.PR_DATA | fromJson | get('labels') | join(',') }}