name: PR Automation with PR.txt

on:
  push:
    branches:
      - feature/*
    paths:
      - 'PR.txt'
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  pr-automation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Installeer Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Deel 1: PR-creatie of sluiting bij push
      - name: Validate PR.txt and Manage PR
        if: github.event_name == 'push'
        run: |
          poetry install --no-root
          PR_CONTENT=$(poetry run tools/validate_pr_txt.py && echo "VALID" || echo "INVALID")
          if [ "$PR_CONTENT" = "VALID" ]; then
            TITLE=$(grep "^Title:" PR.txt | cut -d':' -f2- | xargs)
            DESCRIPTION=$(grep "^Description:" PR.txt | cut -d':' -f2- | xargs)
            LABELS=$(grep "^Labels:" PR.txt | cut -d':' -f2- | xargs || echo "")
            if [ -z "$TITLE" ] || [ -z "$DESCRIPTION" ]; then
              echo "Validation failed or missing fields."
              exit 1
            fi
            echo "Creating PR with title: $TITLE"
            gh pr create --base main --head ${{ github.ref_name }} --title "$TITLE" --body "$DESCRIPTION" --label "$LABELS"
          elif [ -f PR.txt ]; then
            echo "PR.txt is invalid—aborting."
            exit 1
          else
            echo "No valid PR.txt found—checking for open PRs to close."
            PR_EXISTS=$(gh pr list --head ${{ github.ref_name }} --state open --json number -q '.[] | .number')
            if [ -n "$PR_EXISTS" ]; then
              for PR_NUM in $PR_EXISTS; do
                echo "Closing PR #$PR_NUM as PR.txt was removed."
                gh pr close $PR_NUM --comment "Closed due to PR.txt removal."
              done
            else
              echo "No open PRs found for this branch."
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Deel 2: Cleanup na merge
      - name: Remove PR.txt after merge
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
        run: |
          git checkout ${{ github.event.pull_request.head.ref }}
          if [ -f PR.txt ]; then
            git rm PR.txt
            git commit -m "Remove PR.txt after merge"
            git push origin ${{ github.event.pull_request.head.ref }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}