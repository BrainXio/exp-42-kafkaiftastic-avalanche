name: CI Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/ci.yml'

permissions:
  contents: write
  packages: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('pyproject.toml') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install --no-root
      - name: Auto-format with Black
        run: |
          poetry run black src/ tests/
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add src/ tests/
            git commit -m "Auto-format with Black" || echo "No changes to commit"
            git push
          fi
      - name: Check linting
        run: |
          poetry run black --check src/ tests/
          poetry run flake8 src/ tests/
          poetry run ruff check src/ tests/

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('pyproject.toml') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install --no-root
      - name: Run tests
        run: poetry run pytest tests/

  build-and-push:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/brainxio/exp-42-kafkaiftastic-avalanche:latest
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
      - name: Generate mission artifact
        run: |
          cp artifacts/mission_template.json mission.json
          sed -i "s/\"version\": \".*\"/\"version\": \"latest\"/" mission.json
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mission-artifacts
          path: mission.json
          retention-days: 7